CREATE DATABASE retailDB;
USE retailDB;

CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(50),
    brand VARCHAR(50),
    price DECIMAL(10,2),
    stock_quantity INT
);

CREATE TABLE stores (
    store_id INT AUTO_INCREMENT PRIMARY KEY,
    store_name VARCHAR(100),
    region VARCHAR(50),
    city VARCHAR(50),
    manager_name VARCHAR(100)
);

CREATE TABLE employees (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_name VARCHAR(100),
    position VARCHAR(50),
    salary DECIMAL(10,2),
    hire_date DATE,
    store_id INT,
    FOREIGN KEY (store_id) REFERENCES stores(store_id)
);

CREATE TABLE sales (
    sale_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT,
    store_id INT,
    employee_id INT,
    sale_date DATE,
    quantity INT,
    total_amount DECIMAL(10,2),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (store_id) REFERENCES stores(store_id),
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);


INSERT INTO products (product_name, category, brand, price, stock_quantity) VALUES
('Laptop','Electronics','Dell',55000,30),
('Headphones','Electronics','Sony',2500,100),
('Shirt','Clothing','Zara',1500,50),
('Shoes','Footwear','Nike',3000,40),
('Smartphone','Electronics','Samsung',35000,25),
('Tablet','Electronics','Apple',45000,15),
('Jacket','Clothing','Adidas',4000,20),
('Watch','Accessories','Fossil',12000,35),
('TV','Electronics','LG',65000,10),
('Keyboard','Electronics','Logitech',1500,80);

INSERT INTO stores (store_name, region, city, manager_name) VALUES
('Store A','North','Delhi','Rajesh Mehta'),
('Store B','South','Bangalore','Neha Singh'),
('Store C','West','Mumbai','Sanjay Patel'),
('Store D','East','Kolkata','Arjun Roy'),
('Store E','Central','Nagpur','Amit Verma'),
('Store F','North','Chandigarh','Deepak Joshi'),
('Store G','South','Chennai','Kavya Iyer'),
('Store H','East','Patna','Ravi Das'),
('Store I','West','Pune','Sonal Patel'),
('Store J','North','Lucknow','Anjali Gupta');

INSERT INTO employees (employee_name, position, salary, hire_date, store_id) VALUES
('Rajesh Kumar','Sales Associate',25000,'2020-05-12',1),
('Neha Sharma','Manager',50000,'2018-03-20',1),
('Amit Verma','Cashier',22000,'2021-01-11',2),
('Sonal Patel','Sales Associate',24000,'2020-07-01',2),
('Vikram Singh','Manager',52000,'2019-09-13',3),
('Pooja Mehta','Sales Associate',23000,'2021-02-19',3),
('Deepak Joshi','Cashier',21000,'2022-06-05',4),
('Ravi Das','Sales Associate',24000,'2020-10-08',4),
('Anjali Gupta','Manager',51000,'2017-05-30',5),
('Arjun Roy','Cashier',20000,'2022-04-12',5);

INSERT INTO sales (product_id, store_id, employee_id, sale_date, quantity, total_amount) VALUES
(1,1,1,'2025-09-01',2,110000),
(2,1,2,'2025-09-01',5,12500),
(3,2,3,'2025-09-02',3,4500),
(4,2,4,'2025-09-02',2,6000),
(5,3,5,'2025-09-03',1,35000),
(6,3,6,'2025-09-03',2,90000),
(7,4,7,'2025-09-04',3,12000),
(8,4,8,'2025-09-04',1,12000),
(9,5,9,'2025-09-05',1,65000),
(10,5,10,'2025-09-05',4,6000);

//Insert sales data with CRUD operations
USE retailDB;

//CREATE (Insert new sale)

INSERT INTO sales (product_id, store_id, employee_id, sale_date, quantity, total_amount)
VALUES (2, 2, 4, '2025-09-06', 3, 7500);

//READ (Select all sales)

SELECT * FROM sales;

//READ (Sales for a specific store)
SELECT * FROM sales WHERE store_id = 1;

//READ (Sales in a date range)
SELECT * FROM sales 
WHERE sale_date BETWEEN '2025-09-01' AND '2025-09-05';

// UPDATE (Correct total_amount for a sale)

UPDATE sales
SET total_amount = 8000
WHERE sale_id = 3;

//UPDATE (Change quantity sold)

UPDATE sales
SET quantity = 5, total_amount = 12500
WHERE sale_id = 2;

//DELETE (Cancel a sale record)

DELETE FROM sales
WHERE sale_id = 10;

//DELETE (Remove all sales for a discontinued product)
DELETE FROM sales
WHERE product_id = 9;

DELIMITER //

CREATE PROCEDURE GetDailySalesByStore(
    IN storeId INT,
    IN saleDate DATE
)
BEGIN
    SELECT 
        st.store_name,
        SUM(sa.total_amount) AS daily_sales,
        COUNT(sa.sale_id) AS total_transactions
    FROM sales sa
    JOIN stores st ON sa.store_id = st.store_id
    WHERE sa.store_id = storeId 
      AND sa.sale_date = saleDate
    GROUP BY st.store_name;
END //

DELIMITER ;

CALL GetDailySalesByStore(1, '2025-09-01');
